// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: book_copies.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createBookCopy = `-- name: CreateBookCopy :one
INSERT INTO book_copies (book_id, copy_code, hall_id, location_info)
VALUES ($1, $2, $3, $4)
RETURNING id, copy_code, status
`

type CreateBookCopyParams struct {
	BookID       uuid.UUID  `json:"book_id"`
	CopyCode     string     `json:"copy_code"`
	HallID       *uuid.UUID `json:"hall_id"`
	LocationInfo *string    `json:"location_info"`
}

type CreateBookCopyRow struct {
	ID       uuid.UUID      `json:"id"`
	CopyCode string         `json:"copy_code"`
	Status   NullBookStatus `json:"status"`
}

func (q *Queries) CreateBookCopy(ctx context.Context, arg CreateBookCopyParams) (*CreateBookCopyRow, error) {
	row := q.db.QueryRow(ctx, createBookCopy,
		arg.BookID,
		arg.CopyCode,
		arg.HallID,
		arg.LocationInfo,
	)
	var i CreateBookCopyRow
	err := row.Scan(&i.ID, &i.CopyCode, &i.Status)
	return &i, err
}

const getAvailableBookCopy = `-- name: GetAvailableBookCopy :one
SELECT bc.id, bc.copy_code, bc.status, b.title, bc.location_info
FROM book_copies bc
JOIN books b ON bc.book_id = b.id
WHERE bc.copy_code = $1 AND bc.status = 'available'
`

type GetAvailableBookCopyRow struct {
	ID           uuid.UUID      `json:"id"`
	CopyCode     string         `json:"copy_code"`
	Status       NullBookStatus `json:"status"`
	Title        string         `json:"title"`
	LocationInfo *string        `json:"location_info"`
}

func (q *Queries) GetAvailableBookCopy(ctx context.Context, copyCode string) (*GetAvailableBookCopyRow, error) {
	row := q.db.QueryRow(ctx, getAvailableBookCopy, copyCode)
	var i GetAvailableBookCopyRow
	err := row.Scan(
		&i.ID,
		&i.CopyCode,
		&i.Status,
		&i.Title,
		&i.LocationInfo,
	)
	return &i, err
}

const getBookCopiesByBookId = `-- name: GetBookCopiesByBookId :many
SELECT id, copy_code, status
FROM book_copies
WHERE book_id = $1
ORDER BY copy_code
`

type GetBookCopiesByBookIdRow struct {
	ID       uuid.UUID      `json:"id"`
	CopyCode string         `json:"copy_code"`
	Status   NullBookStatus `json:"status"`
}

func (q *Queries) GetBookCopiesByBookId(ctx context.Context, bookID uuid.UUID) ([]*GetBookCopiesByBookIdRow, error) {
	rows, err := q.db.Query(ctx, getBookCopiesByBookId, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetBookCopiesByBookIdRow{}
	for rows.Next() {
		var i GetBookCopiesByBookIdRow
		if err := rows.Scan(&i.ID, &i.CopyCode, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookCopiesByHall = `-- name: GetBookCopiesByHall :many
SELECT bc.id, bc.copy_code, bc.status, b.title
FROM book_copies bc
JOIN books b ON bc.book_id = b.id
WHERE bc.hall_id = $1
ORDER BY b.title, bc.copy_code
`

type GetBookCopiesByHallRow struct {
	ID       uuid.UUID      `json:"id"`
	CopyCode string         `json:"copy_code"`
	Status   NullBookStatus `json:"status"`
	Title    string         `json:"title"`
}

func (q *Queries) GetBookCopiesByHall(ctx context.Context, hallID *uuid.UUID) ([]*GetBookCopiesByHallRow, error) {
	rows, err := q.db.Query(ctx, getBookCopiesByHall, hallID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetBookCopiesByHallRow{}
	for rows.Next() {
		var i GetBookCopiesByHallRow
		if err := rows.Scan(
			&i.ID,
			&i.CopyCode,
			&i.Status,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookCopyByCode = `-- name: GetBookCopyByCode :one
SELECT bc.id, bc.copy_code, bc.status, b.id as book_id, b.title, bc.location_info
FROM book_copies bc
JOIN books b ON bc.book_id = b.id
WHERE bc.copy_code = $1
`

type GetBookCopyByCodeRow struct {
	ID           uuid.UUID      `json:"id"`
	CopyCode     string         `json:"copy_code"`
	Status       NullBookStatus `json:"status"`
	BookID       uuid.UUID      `json:"book_id"`
	Title        string         `json:"title"`
	LocationInfo *string        `json:"location_info"`
}

func (q *Queries) GetBookCopyByCode(ctx context.Context, copyCode string) (*GetBookCopyByCodeRow, error) {
	row := q.db.QueryRow(ctx, getBookCopyByCode, copyCode)
	var i GetBookCopyByCodeRow
	err := row.Scan(
		&i.ID,
		&i.CopyCode,
		&i.Status,
		&i.BookID,
		&i.Title,
		&i.LocationInfo,
	)
	return &i, err
}

const getBookCopyById = `-- name: GetBookCopyById :one
SELECT bc.id, bc.copy_code, bc.status, b.title, rh.hall_name, bc.location_info
FROM book_copies bc
JOIN books b ON bc.book_id = b.id
LEFT JOIN reading_halls rh ON bc.hall_id = rh.id
WHERE bc.id = $1
`

type GetBookCopyByIdRow struct {
	ID           uuid.UUID      `json:"id"`
	CopyCode     string         `json:"copy_code"`
	Status       NullBookStatus `json:"status"`
	Title        string         `json:"title"`
	HallName     *string        `json:"hall_name"`
	LocationInfo *string        `json:"location_info"`
}

func (q *Queries) GetBookCopyById(ctx context.Context, copyID uuid.UUID) (*GetBookCopyByIdRow, error) {
	row := q.db.QueryRow(ctx, getBookCopyById, copyID)
	var i GetBookCopyByIdRow
	err := row.Scan(
		&i.ID,
		&i.CopyCode,
		&i.Status,
		&i.Title,
		&i.HallName,
		&i.LocationInfo,
	)
	return &i, err
}

const updateBookCopyStatus = `-- name: UpdateBookCopyStatus :exec
UPDATE book_copies
SET status = $1
WHERE id = $2
`

type UpdateBookCopyStatusParams struct {
	Status NullBookStatus `json:"status"`
	CopyID uuid.UUID      `json:"copy_id"`
}

func (q *Queries) UpdateBookCopyStatus(ctx context.Context, arg UpdateBookCopyStatusParams) error {
	_, err := q.db.Exec(ctx, updateBookCopyStatus, arg.Status, arg.CopyID)
	return err
}
