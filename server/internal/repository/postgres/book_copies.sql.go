// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: book_copies.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countAvailableBookCopies = `-- name: CountAvailableBookCopies :one
SELECT COUNT(*) FROM book_copies WHERE book_id = $1 AND status = 'available'
`

func (q *Queries) CountAvailableBookCopies(ctx context.Context, bookID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAvailableBookCopies, bookID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countBookCopiesByBook = `-- name: CountBookCopiesByBook :one
SELECT COUNT(*) FROM book_copies WHERE book_id = $1
`

func (q *Queries) CountBookCopiesByBook(ctx context.Context, bookID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countBookCopiesByBook, bookID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBookCopy = `-- name: CreateBookCopy :one
INSERT INTO book_copies (book_id, copy_code, status, reading_hall_id, condition_notes)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, book_id, copy_code, status, reading_hall_id, condition_notes, created_at, updated_at
`

type CreateBookCopyParams struct {
	BookID         uuid.UUID      `json:"book_id"`
	CopyCode       string         `json:"copy_code"`
	Status         NullBookStatus `json:"status"`
	ReadingHallID  *uuid.UUID     `json:"reading_hall_id"`
	ConditionNotes *string        `json:"condition_notes"`
}

func (q *Queries) CreateBookCopy(ctx context.Context, arg CreateBookCopyParams) (*BookCopy, error) {
	row := q.db.QueryRow(ctx, createBookCopy,
		arg.BookID,
		arg.CopyCode,
		arg.Status,
		arg.ReadingHallID,
		arg.ConditionNotes,
	)
	var i BookCopy
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CopyCode,
		&i.Status,
		&i.ReadingHallID,
		&i.ConditionNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteBookCopy = `-- name: DeleteBookCopy :exec
DELETE FROM book_copies WHERE id = $1
`

func (q *Queries) DeleteBookCopy(ctx context.Context, copyID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBookCopy, copyID)
	return err
}

const getBookCopiesByStatus = `-- name: GetBookCopiesByStatus :many
SELECT bc.id, bc.book_id, bc.copy_code, bc.status, bc.reading_hall_id, bc.condition_notes, bc.created_at, bc.updated_at, b.title, b.isbn, rh.hall_name
FROM book_copies bc
JOIN books b ON bc.book_id = b.id
LEFT JOIN reading_halls rh ON bc.reading_hall_id = rh.id
WHERE bc.status = $1
ORDER BY b.title, bc.copy_code
`

type GetBookCopiesByStatusRow struct {
	ID             uuid.UUID      `json:"id"`
	BookID         uuid.UUID      `json:"book_id"`
	CopyCode       string         `json:"copy_code"`
	Status         NullBookStatus `json:"status"`
	ReadingHallID  *uuid.UUID     `json:"reading_hall_id"`
	ConditionNotes *string        `json:"condition_notes"`
	CreatedAt      *time.Time     `json:"created_at"`
	UpdatedAt      *time.Time     `json:"updated_at"`
	Title          string         `json:"title"`
	Isbn           *string        `json:"isbn"`
	HallName       *string        `json:"hall_name"`
}

func (q *Queries) GetBookCopiesByStatus(ctx context.Context, status NullBookStatus) ([]*GetBookCopiesByStatusRow, error) {
	rows, err := q.db.Query(ctx, getBookCopiesByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetBookCopiesByStatusRow{}
	for rows.Next() {
		var i GetBookCopiesByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.CopyCode,
			&i.Status,
			&i.ReadingHallID,
			&i.ConditionNotes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Isbn,
			&i.HallName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookCopyByCode = `-- name: GetBookCopyByCode :one
SELECT bc.id, bc.book_id, bc.copy_code, bc.status, bc.reading_hall_id, bc.condition_notes, bc.created_at, bc.updated_at, b.title, b.isbn
FROM book_copies bc
JOIN books b ON bc.book_id = b.id
WHERE bc.copy_code = $1
`

type GetBookCopyByCodeRow struct {
	ID             uuid.UUID      `json:"id"`
	BookID         uuid.UUID      `json:"book_id"`
	CopyCode       string         `json:"copy_code"`
	Status         NullBookStatus `json:"status"`
	ReadingHallID  *uuid.UUID     `json:"reading_hall_id"`
	ConditionNotes *string        `json:"condition_notes"`
	CreatedAt      *time.Time     `json:"created_at"`
	UpdatedAt      *time.Time     `json:"updated_at"`
	Title          string         `json:"title"`
	Isbn           *string        `json:"isbn"`
}

func (q *Queries) GetBookCopyByCode(ctx context.Context, copyCode string) (*GetBookCopyByCodeRow, error) {
	row := q.db.QueryRow(ctx, getBookCopyByCode, copyCode)
	var i GetBookCopyByCodeRow
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CopyCode,
		&i.Status,
		&i.ReadingHallID,
		&i.ConditionNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Isbn,
	)
	return &i, err
}

const getBookCopyByID = `-- name: GetBookCopyByID :one
SELECT bc.id, bc.book_id, bc.copy_code, bc.status, bc.reading_hall_id, bc.condition_notes, bc.created_at, bc.updated_at, b.title, b.isbn
FROM book_copies bc
JOIN books b ON bc.book_id = b.id
WHERE bc.id = $1
`

type GetBookCopyByIDRow struct {
	ID             uuid.UUID      `json:"id"`
	BookID         uuid.UUID      `json:"book_id"`
	CopyCode       string         `json:"copy_code"`
	Status         NullBookStatus `json:"status"`
	ReadingHallID  *uuid.UUID     `json:"reading_hall_id"`
	ConditionNotes *string        `json:"condition_notes"`
	CreatedAt      *time.Time     `json:"created_at"`
	UpdatedAt      *time.Time     `json:"updated_at"`
	Title          string         `json:"title"`
	Isbn           *string        `json:"isbn"`
}

func (q *Queries) GetBookCopyByID(ctx context.Context, copyID uuid.UUID) (*GetBookCopyByIDRow, error) {
	row := q.db.QueryRow(ctx, getBookCopyByID, copyID)
	var i GetBookCopyByIDRow
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CopyCode,
		&i.Status,
		&i.ReadingHallID,
		&i.ConditionNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Isbn,
	)
	return &i, err
}

const listAvailableBookCopies = `-- name: ListAvailableBookCopies :many
SELECT bc.id, bc.book_id, bc.copy_code, bc.status, bc.reading_hall_id, bc.condition_notes, bc.created_at, bc.updated_at, b.title, b.isbn
FROM book_copies bc
JOIN books b ON bc.book_id = b.id
WHERE bc.status = 'available'
ORDER BY b.title, bc.copy_code
`

type ListAvailableBookCopiesRow struct {
	ID             uuid.UUID      `json:"id"`
	BookID         uuid.UUID      `json:"book_id"`
	CopyCode       string         `json:"copy_code"`
	Status         NullBookStatus `json:"status"`
	ReadingHallID  *uuid.UUID     `json:"reading_hall_id"`
	ConditionNotes *string        `json:"condition_notes"`
	CreatedAt      *time.Time     `json:"created_at"`
	UpdatedAt      *time.Time     `json:"updated_at"`
	Title          string         `json:"title"`
	Isbn           *string        `json:"isbn"`
}

func (q *Queries) ListAvailableBookCopies(ctx context.Context) ([]*ListAvailableBookCopiesRow, error) {
	rows, err := q.db.Query(ctx, listAvailableBookCopies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListAvailableBookCopiesRow{}
	for rows.Next() {
		var i ListAvailableBookCopiesRow
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.CopyCode,
			&i.Status,
			&i.ReadingHallID,
			&i.ConditionNotes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Isbn,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookCopiesByBook = `-- name: ListBookCopiesByBook :many
SELECT bc.id, bc.book_id, bc.copy_code, bc.status, bc.reading_hall_id, bc.condition_notes, bc.created_at, bc.updated_at, rh.hall_name
FROM book_copies bc
LEFT JOIN reading_halls rh ON bc.reading_hall_id = rh.id
WHERE bc.book_id = $1
ORDER BY bc.copy_code
`

type ListBookCopiesByBookRow struct {
	ID             uuid.UUID      `json:"id"`
	BookID         uuid.UUID      `json:"book_id"`
	CopyCode       string         `json:"copy_code"`
	Status         NullBookStatus `json:"status"`
	ReadingHallID  *uuid.UUID     `json:"reading_hall_id"`
	ConditionNotes *string        `json:"condition_notes"`
	CreatedAt      *time.Time     `json:"created_at"`
	UpdatedAt      *time.Time     `json:"updated_at"`
	HallName       *string        `json:"hall_name"`
}

func (q *Queries) ListBookCopiesByBook(ctx context.Context, bookID uuid.UUID) ([]*ListBookCopiesByBookRow, error) {
	rows, err := q.db.Query(ctx, listBookCopiesByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListBookCopiesByBookRow{}
	for rows.Next() {
		var i ListBookCopiesByBookRow
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.CopyCode,
			&i.Status,
			&i.ReadingHallID,
			&i.ConditionNotes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.HallName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookCopy = `-- name: UpdateBookCopy :one
UPDATE book_copies
SET
    status = COALESCE($1, status),
    reading_hall_id = COALESCE($2, reading_hall_id),
    condition_notes = COALESCE($3, condition_notes),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, book_id, copy_code, status, reading_hall_id, condition_notes, created_at, updated_at
`

type UpdateBookCopyParams struct {
	Status         NullBookStatus `json:"status"`
	ReadingHallID  *uuid.UUID     `json:"reading_hall_id"`
	ConditionNotes *string        `json:"condition_notes"`
	CopyID         uuid.UUID      `json:"copy_id"`
}

func (q *Queries) UpdateBookCopy(ctx context.Context, arg UpdateBookCopyParams) (*BookCopy, error) {
	row := q.db.QueryRow(ctx, updateBookCopy,
		arg.Status,
		arg.ReadingHallID,
		arg.ConditionNotes,
		arg.CopyID,
	)
	var i BookCopy
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.CopyCode,
		&i.Status,
		&i.ReadingHallID,
		&i.ConditionNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
