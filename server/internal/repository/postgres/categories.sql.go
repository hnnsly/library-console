// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package postgres

import (
	"context"

	"github.com/govalues/decimal"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO book_categories (name, description, default_loan_days)
VALUES ($1, $2, $3)
RETURNING id, name, description, default_loan_days, created_at
`

type CreateCategoryParams struct {
	Name            string  `json:"name"`
	Description     *string `json:"description"`
	DefaultLoanDays int     `json:"default_loan_days"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (*BookCategory, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.Description, arg.DefaultLoanDays)
	var i BookCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultLoanDays,
		&i.CreatedAt,
	)
	return &i, err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, description, default_loan_days, created_at FROM book_categories ORDER BY name
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]*BookCategory, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*BookCategory{}
	for rows.Next() {
		var i BookCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DefaultLoanDays,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryStatistics = `-- name: GetCategoryStatistics :many
SELECT
    c.name as category_name,
    COUNT(DISTINCT b.id) as total_books,
    COUNT(lh.id) as total_loans,
    ROUND(AVG(CASE WHEN lh.return_date IS NOT NULL
              THEN EXTRACT(DAYS FROM (lh.return_date - lh.loan_date)) END), 1) as avg_loan_days,
    COUNT(CASE WHEN lh.return_date > lh.due_date THEN 1 END) as overdue_returns,
    ROUND(COUNT(CASE WHEN lh.return_date > lh.due_date THEN 1 END) * 100.0 /
          NULLIF(COUNT(CASE WHEN lh.return_date IS NOT NULL THEN 1 END), 0), 2) as overdue_percentage
FROM book_categories c
LEFT JOIN books b ON c.id = b.category_id
LEFT JOIN loan_history lh ON b.id = lh.book_id AND lh.loan_date >= CURRENT_DATE - INTERVAL '@days_back days'
GROUP BY c.id, c.name
ORDER BY total_loans DESC
`

type GetCategoryStatisticsRow struct {
	CategoryName      string          `json:"category_name"`
	TotalBooks        int64           `json:"total_books"`
	TotalLoans        int64           `json:"total_loans"`
	AvgLoanDays       decimal.Decimal `json:"avg_loan_days"`
	OverdueReturns    int64           `json:"overdue_returns"`
	OverduePercentage decimal.Decimal `json:"overdue_percentage"`
}

func (q *Queries) GetCategoryStatistics(ctx context.Context) ([]*GetCategoryStatisticsRow, error) {
	rows, err := q.db.Query(ctx, getCategoryStatistics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetCategoryStatisticsRow{}
	for rows.Next() {
		var i GetCategoryStatisticsRow
		if err := rows.Scan(
			&i.CategoryName,
			&i.TotalBooks,
			&i.TotalLoans,
			&i.AvgLoanDays,
			&i.OverdueReturns,
			&i.OverduePercentage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
