// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: halls.sql

package postgres

import (
	"context"

	"github.com/govalues/decimal"
)

const getAllHalls = `-- name: GetAllHalls :many
SELECT id, name, specialization, total_seats, occupied_seats,
       (total_seats - occupied_seats) as free_seats,
       ROUND((occupied_seats * 100.0 / total_seats), 2) as occupancy_percent,
       working_hours, status
FROM halls
WHERE status = 'open'
ORDER BY name
`

type GetAllHallsRow struct {
	ID               int64           `json:"id"`
	Name             string          `json:"name"`
	Specialization   string          `json:"specialization"`
	TotalSeats       int             `json:"total_seats"`
	OccupiedSeats    int             `json:"occupied_seats"`
	FreeSeats        int32           `json:"free_seats"`
	OccupancyPercent decimal.Decimal `json:"occupancy_percent"`
	WorkingHours     string          `json:"working_hours"`
	Status           string          `json:"status"`
}

func (q *Queries) GetAllHalls(ctx context.Context) ([]*GetAllHallsRow, error) {
	rows, err := q.db.Query(ctx, getAllHalls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllHallsRow{}
	for rows.Next() {
		var i GetAllHallsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Specialization,
			&i.TotalSeats,
			&i.OccupiedSeats,
			&i.FreeSeats,
			&i.OccupancyPercent,
			&i.WorkingHours,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHallByID = `-- name: GetHallByID :one
SELECT id, name, library_name, specialization, total_seats, occupied_seats, working_hours, equipment, status, visit_statistics, average_occupancy, created_at, updated_at FROM halls WHERE id = $1
`

func (q *Queries) GetHallByID(ctx context.Context, hallID int64) (*Hall, error) {
	row := q.db.QueryRow(ctx, getHallByID, hallID)
	var i Hall
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LibraryName,
		&i.Specialization,
		&i.TotalSeats,
		&i.OccupiedSeats,
		&i.WorkingHours,
		&i.Equipment,
		&i.Status,
		&i.VisitStatistics,
		&i.AverageOccupancy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getHallStatistics = `-- name: GetHallStatistics :many
SELECT
    h.name as hall_name,
    h.specialization,
    COUNT(DISTINCT b.id) as total_books,
    SUM(b.total_copies) as total_copies,
    COUNT(lh.id) as total_loans,
    ROUND(h.average_occupancy, 2) as avg_occupancy_percent,
    (h.total_seats - h.occupied_seats) as current_free_seats
FROM halls h
LEFT JOIN books b ON h.id = b.hall_id
LEFT JOIN loan_history lh ON b.id = lh.book_id AND lh.loan_date >= CURRENT_DATE - INTERVAL '@days_back days'
GROUP BY h.id, h.name, h.specialization, h.average_occupancy, h.total_seats, h.occupied_seats
ORDER BY total_loans DESC
`

type GetHallStatisticsRow struct {
	HallName            string          `json:"hall_name"`
	Specialization      string          `json:"specialization"`
	TotalBooks          int64           `json:"total_books"`
	TotalCopies         int64           `json:"total_copies"`
	TotalLoans          int64           `json:"total_loans"`
	AvgOccupancyPercent decimal.Decimal `json:"avg_occupancy_percent"`
	CurrentFreeSeats    int32           `json:"current_free_seats"`
}

func (q *Queries) GetHallStatistics(ctx context.Context) ([]*GetHallStatisticsRow, error) {
	rows, err := q.db.Query(ctx, getHallStatistics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHallStatisticsRow{}
	for rows.Next() {
		var i GetHallStatisticsRow
		if err := rows.Scan(
			&i.HallName,
			&i.Specialization,
			&i.TotalBooks,
			&i.TotalCopies,
			&i.TotalLoans,
			&i.AvgOccupancyPercent,
			&i.CurrentFreeSeats,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHallOccupancy = `-- name: UpdateHallOccupancy :exec
UPDATE halls
SET occupied_seats = (
    SELECT COUNT(DISTINCT reader_id)
    FROM loan_history lh
    JOIN readers r ON lh.reader_id = r.id
    WHERE r.hall_id = $1 AND lh.status = 'active'
),
average_occupancy = (occupied_seats * 100.0 / total_seats),
updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateHallOccupancy(ctx context.Context, hallID int) error {
	_, err := q.db.Exec(ctx, updateHallOccupancy, hallID)
	return err
}
