// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: book_authors.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const addBookAuthor = `-- name: AddBookAuthor :exec
INSERT INTO book_authors (book_id, author_id)
VALUES ($1, $2)
ON CONFLICT (book_id, author_id) DO NOTHING
`

type AddBookAuthorParams struct {
	BookID   uuid.UUID `json:"book_id"`
	AuthorID uuid.UUID `json:"author_id"`
}

func (q *Queries) AddBookAuthor(ctx context.Context, arg AddBookAuthorParams) error {
	_, err := q.db.Exec(ctx, addBookAuthor, arg.BookID, arg.AuthorID)
	return err
}

const getAuthorBooks = `-- name: GetAuthorBooks :many
SELECT b.id, b.title, b.isbn, b.publication_year, b.publisher, b.pages, b.language, b.description, b.total_copies, b.available_copies, b.created_at, b.updated_at
FROM books b
JOIN book_authors ba ON b.id = ba.book_id
WHERE ba.author_id = $1
ORDER BY b.title
`

func (q *Queries) GetAuthorBooks(ctx context.Context, authorID uuid.UUID) ([]*Book, error) {
	rows, err := q.db.Query(ctx, getAuthorBooks, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Isbn,
			&i.PublicationYear,
			&i.Publisher,
			&i.Pages,
			&i.Language,
			&i.Description,
			&i.TotalCopies,
			&i.AvailableCopies,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookAuthors = `-- name: GetBookAuthors :many
SELECT a.id, a.full_name, a.birth_year, a.death_year, a.biography, a.created_at
FROM authors a
JOIN book_authors ba ON a.id = ba.author_id
WHERE ba.book_id = $1
ORDER BY a.full_name
`

func (q *Queries) GetBookAuthors(ctx context.Context, bookID uuid.UUID) ([]*Author, error) {
	rows, err := q.db.Query(ctx, getBookAuthors, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.BirthYear,
			&i.DeathYear,
			&i.Biography,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllBookAuthors = `-- name: RemoveAllBookAuthors :exec
DELETE FROM book_authors WHERE book_id = $1
`

func (q *Queries) RemoveAllBookAuthors(ctx context.Context, bookID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllBookAuthors, bookID)
	return err
}

const removeBookAuthor = `-- name: RemoveBookAuthor :exec
DELETE FROM book_authors
WHERE book_id = $1 AND author_id = $2
`

type RemoveBookAuthorParams struct {
	BookID   uuid.UUID `json:"book_id"`
	AuthorID uuid.UUID `json:"author_id"`
}

func (q *Queries) RemoveBookAuthor(ctx context.Context, arg RemoveBookAuthorParams) error {
	_, err := q.db.Exec(ctx, removeBookAuthor, arg.BookID, arg.AuthorID)
	return err
}
