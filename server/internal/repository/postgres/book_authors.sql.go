// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: book_authors.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const addBookAuthor = `-- name: AddBookAuthor :exec
INSERT INTO book_authors (book_id, author_id)
VALUES ($1, $2)
`

type AddBookAuthorParams struct {
	BookID   uuid.UUID `json:"book_id"`
	AuthorID uuid.UUID `json:"author_id"`
}

func (q *Queries) AddBookAuthor(ctx context.Context, arg AddBookAuthorParams) error {
	_, err := q.db.Exec(ctx, addBookAuthor, arg.BookID, arg.AuthorID)
	return err
}

const getAuthorBooks = `-- name: GetAuthorBooks :many
SELECT b.id, b.title, b.isbn, b.publication_year
FROM books b
JOIN book_authors ba ON b.id = ba.book_id
WHERE ba.author_id = $1
ORDER BY b.title
`

type GetAuthorBooksRow struct {
	ID              uuid.UUID `json:"id"`
	Title           string    `json:"title"`
	Isbn            *string   `json:"isbn"`
	PublicationYear *int      `json:"publication_year"`
}

func (q *Queries) GetAuthorBooks(ctx context.Context, authorID uuid.UUID) ([]*GetAuthorBooksRow, error) {
	rows, err := q.db.Query(ctx, getAuthorBooks, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAuthorBooksRow{}
	for rows.Next() {
		var i GetAuthorBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Isbn,
			&i.PublicationYear,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookAuthors = `-- name: GetBookAuthors :many
SELECT a.id, a.full_name
FROM authors a
JOIN book_authors ba ON a.id = ba.author_id
WHERE ba.book_id = $1
ORDER BY a.full_name
`

type GetBookAuthorsRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"full_name"`
}

func (q *Queries) GetBookAuthors(ctx context.Context, bookID uuid.UUID) ([]*GetBookAuthorsRow, error) {
	rows, err := q.db.Query(ctx, getBookAuthors, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetBookAuthorsRow{}
	for rows.Next() {
		var i GetBookAuthorsRow
		if err := rows.Scan(&i.ID, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBookAuthor = `-- name: RemoveBookAuthor :exec
DELETE FROM book_authors
WHERE book_id = $1 AND author_id = $2
`

type RemoveBookAuthorParams struct {
	BookID   uuid.UUID `json:"book_id"`
	AuthorID uuid.UUID `json:"author_id"`
}

func (q *Queries) RemoveBookAuthor(ctx context.Context, arg RemoveBookAuthorParams) error {
	_, err := q.db.Exec(ctx, removeBookAuthor, arg.BookID, arg.AuthorID)
	return err
}
