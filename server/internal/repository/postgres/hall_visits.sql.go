// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hall_visits.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/govalues/decimal"
)

const getDailyVisitStats = `-- name: GetDailyVisitStats :many
SELECT
    DATE(visit_time) as visit_date,
    COUNT(*) as total_visits,
    COUNT(DISTINCT reader_id) as unique_visitors
FROM hall_visits
WHERE hall_id = $1
  AND visit_time >= $2
  AND visit_time <= $3
  AND visit_type = 'entry'
GROUP BY DATE(visit_time)
ORDER BY visit_date
`

type GetDailyVisitStatsParams struct {
	HallID    uuid.UUID  `json:"hall_id"`
	StartDate *time.Time `json:"start_date"`
	EndDate   *time.Time `json:"end_date"`
}

type GetDailyVisitStatsRow struct {
	VisitDate      time.Time `json:"visit_date"`
	TotalVisits    int64     `json:"total_visits"`
	UniqueVisitors int64     `json:"unique_visitors"`
}

func (q *Queries) GetDailyVisitStats(ctx context.Context, arg GetDailyVisitStatsParams) ([]*GetDailyVisitStatsRow, error) {
	rows, err := q.db.Query(ctx, getDailyVisitStats, arg.HallID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetDailyVisitStatsRow{}
	for rows.Next() {
		var i GetDailyVisitStatsRow
		if err := rows.Scan(&i.VisitDate, &i.TotalVisits, &i.UniqueVisitors); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHourlyVisitStats = `-- name: GetHourlyVisitStats :many
SELECT
    EXTRACT(HOUR FROM visit_time) as hour,
    COUNT(*) as visits_count,
    COUNT(DISTINCT reader_id) as unique_visitors
FROM hall_visits
WHERE hall_id = $1
  AND DATE(visit_time) = $2
  AND visit_type = 'entry'
GROUP BY EXTRACT(HOUR FROM visit_time)
ORDER BY hour
`

type GetHourlyVisitStatsParams struct {
	HallID    uuid.UUID  `json:"hall_id"`
	VisitDate *time.Time `json:"visit_date"`
}

type GetHourlyVisitStatsRow struct {
	Hour           decimal.Decimal `json:"hour"`
	VisitsCount    int64           `json:"visits_count"`
	UniqueVisitors int64           `json:"unique_visitors"`
}

func (q *Queries) GetHourlyVisitStats(ctx context.Context, arg GetHourlyVisitStatsParams) ([]*GetHourlyVisitStatsRow, error) {
	rows, err := q.db.Query(ctx, getHourlyVisitStats, arg.HallID, arg.VisitDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHourlyVisitStatsRow{}
	for rows.Next() {
		var i GetHourlyVisitStatsRow
		if err := rows.Scan(&i.Hour, &i.VisitsCount, &i.UniqueVisitors); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReaderVisitHistory = `-- name: GetReaderVisitHistory :many
SELECT
    hv.visit_time,
    hv.visit_type,
    rh.hall_name,
    u.username as librarian_name
FROM hall_visits hv
JOIN reading_halls rh ON hv.hall_id = rh.id
LEFT JOIN users u ON hv.librarian_id = u.id
WHERE hv.reader_id = $1
ORDER BY hv.visit_time DESC
`

type GetReaderVisitHistoryRow struct {
	VisitTime     *time.Time `json:"visit_time"`
	VisitType     VisitType  `json:"visit_type"`
	HallName      string     `json:"hall_name"`
	LibrarianName *string    `json:"librarian_name"`
}

func (q *Queries) GetReaderVisitHistory(ctx context.Context, readerID uuid.UUID) ([]*GetReaderVisitHistoryRow, error) {
	rows, err := q.db.Query(ctx, getReaderVisitHistory, readerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetReaderVisitHistoryRow{}
	for rows.Next() {
		var i GetReaderVisitHistoryRow
		if err := rows.Scan(
			&i.VisitTime,
			&i.VisitType,
			&i.HallName,
			&i.LibrarianName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentHallVisits = `-- name: GetRecentHallVisits :many
SELECT
    hv.visit_time,
    hv.visit_type,
    r.full_name as reader_name,
    r.ticket_number,
    rh.hall_name,
    u.username as librarian_name
FROM hall_visits hv
JOIN readers r ON hv.reader_id = r.id
JOIN reading_halls rh ON hv.hall_id = rh.id
LEFT JOIN users u ON hv.librarian_id = u.id
WHERE hv.visit_time >= $1
ORDER BY hv.visit_time DESC
LIMIT $2
`

type GetRecentHallVisitsParams struct {
	SinceDate  *time.Time `json:"since_date"`
	LimitCount int32      `json:"limit_count"`
}

type GetRecentHallVisitsRow struct {
	VisitTime     *time.Time `json:"visit_time"`
	VisitType     VisitType  `json:"visit_type"`
	ReaderName    string     `json:"reader_name"`
	TicketNumber  string     `json:"ticket_number"`
	HallName      string     `json:"hall_name"`
	LibrarianName *string    `json:"librarian_name"`
}

func (q *Queries) GetRecentHallVisits(ctx context.Context, arg GetRecentHallVisitsParams) ([]*GetRecentHallVisitsRow, error) {
	rows, err := q.db.Query(ctx, getRecentHallVisits, arg.SinceDate, arg.LimitCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecentHallVisitsRow{}
	for rows.Next() {
		var i GetRecentHallVisitsRow
		if err := rows.Scan(
			&i.VisitTime,
			&i.VisitType,
			&i.ReaderName,
			&i.TicketNumber,
			&i.HallName,
			&i.LibrarianName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerHallEntry = `-- name: RegisterHallEntry :one
INSERT INTO hall_visits (reader_id, hall_id, visit_type, librarian_id)
VALUES (
    (SELECT id FROM readers WHERE ticket_number = $1),
    $2,
    'entry',
    $3
)
RETURNING id, visit_time
`

type RegisterHallEntryParams struct {
	TicketNumber string     `json:"ticket_number"`
	HallID       uuid.UUID  `json:"hall_id"`
	LibrarianID  *uuid.UUID `json:"librarian_id"`
}

type RegisterHallEntryRow struct {
	ID        uuid.UUID  `json:"id"`
	VisitTime *time.Time `json:"visit_time"`
}

func (q *Queries) RegisterHallEntry(ctx context.Context, arg RegisterHallEntryParams) (*RegisterHallEntryRow, error) {
	row := q.db.QueryRow(ctx, registerHallEntry, arg.TicketNumber, arg.HallID, arg.LibrarianID)
	var i RegisterHallEntryRow
	err := row.Scan(&i.ID, &i.VisitTime)
	return &i, err
}

const registerHallExit = `-- name: RegisterHallExit :one
INSERT INTO hall_visits (reader_id, hall_id, visit_type, librarian_id)
VALUES (
    (SELECT id FROM readers WHERE ticket_number = $1),
    $2,
    'exit',
    $3
)
RETURNING id, visit_time
`

type RegisterHallExitParams struct {
	TicketNumber string     `json:"ticket_number"`
	HallID       uuid.UUID  `json:"hall_id"`
	LibrarianID  *uuid.UUID `json:"librarian_id"`
}

type RegisterHallExitRow struct {
	ID        uuid.UUID  `json:"id"`
	VisitTime *time.Time `json:"visit_time"`
}

func (q *Queries) RegisterHallExit(ctx context.Context, arg RegisterHallExitParams) (*RegisterHallExitRow, error) {
	row := q.db.QueryRow(ctx, registerHallExit, arg.TicketNumber, arg.HallID, arg.LibrarianID)
	var i RegisterHallExitRow
	err := row.Scan(&i.ID, &i.VisitTime)
	return &i, err
}
