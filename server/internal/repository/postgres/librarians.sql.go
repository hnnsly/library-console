// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: librarians.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLibrarian = `-- name: CreateLibrarian :one
INSERT INTO librarians (
    full_name, employee_id, position, phone, email, hire_date
) VALUES (
    $1, $2, $3, $4, $5, CURRENT_DATE
) RETURNING id, full_name, employee_id, position, phone, email, hire_date, status, created_at, updated_at
`

type CreateLibrarianParams struct {
	FullName   string      `json:"full_name"`
	EmployeeID string      `json:"employee_id"`
	Position   pgtype.Text `json:"position"`
	Phone      pgtype.Text `json:"phone"`
	Email      pgtype.Text `json:"email"`
}

func (q *Queries) CreateLibrarian(ctx context.Context, arg CreateLibrarianParams) (*Librarian, error) {
	row := q.db.QueryRow(ctx, createLibrarian,
		arg.FullName,
		arg.EmployeeID,
		arg.Position,
		arg.Phone,
		arg.Email,
	)
	var i Librarian
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.EmployeeID,
		&i.Position,
		&i.Phone,
		&i.Email,
		&i.HireDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deactivateLibrarian = `-- name: DeactivateLibrarian :exec
UPDATE librarians
SET status = 'inactive', updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeactivateLibrarian(ctx context.Context, librarianID int32) error {
	_, err := q.db.Exec(ctx, deactivateLibrarian, librarianID)
	return err
}

const getAllLibrarians = `-- name: GetAllLibrarians :many
SELECT id, full_name, employee_id, position, phone, email, hire_date, status, created_at, updated_at FROM librarians WHERE status = 'active' ORDER BY full_name
`

func (q *Queries) GetAllLibrarians(ctx context.Context) ([]*Librarian, error) {
	rows, err := q.db.Query(ctx, getAllLibrarians)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Librarian
	for rows.Next() {
		var i Librarian
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.EmployeeID,
			&i.Position,
			&i.Phone,
			&i.Email,
			&i.HireDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLibrarianByEmployeeID = `-- name: GetLibrarianByEmployeeID :one
SELECT id, full_name, employee_id, position, phone, email, hire_date, status, created_at, updated_at FROM librarians WHERE employee_id = $1
`

func (q *Queries) GetLibrarianByEmployeeID(ctx context.Context, employeeID string) (*Librarian, error) {
	row := q.db.QueryRow(ctx, getLibrarianByEmployeeID, employeeID)
	var i Librarian
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.EmployeeID,
		&i.Position,
		&i.Phone,
		&i.Email,
		&i.HireDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getLibrarianByID = `-- name: GetLibrarianByID :one
SELECT id, full_name, employee_id, position, phone, email, hire_date, status, created_at, updated_at FROM librarians WHERE id = $1
`

func (q *Queries) GetLibrarianByID(ctx context.Context, librarianID int32) (*Librarian, error) {
	row := q.db.QueryRow(ctx, getLibrarianByID, librarianID)
	var i Librarian
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.EmployeeID,
		&i.Position,
		&i.Phone,
		&i.Email,
		&i.HireDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateLibrarian = `-- name: UpdateLibrarian :one
UPDATE librarians
SET full_name = $1,
    position = $2,
    phone = $3,
    email = $4,
    updated_at = NOW()
WHERE id = $5
RETURNING id, full_name, employee_id, position, phone, email, hire_date, status, created_at, updated_at
`

type UpdateLibrarianParams struct {
	FullName    string      `json:"full_name"`
	Position    pgtype.Text `json:"position"`
	Phone       pgtype.Text `json:"phone"`
	Email       pgtype.Text `json:"email"`
	LibrarianID int32       `json:"librarian_id"`
}

func (q *Queries) UpdateLibrarian(ctx context.Context, arg UpdateLibrarianParams) (*Librarian, error) {
	row := q.db.QueryRow(ctx, updateLibrarian,
		arg.FullName,
		arg.Position,
		arg.Phone,
		arg.Email,
		arg.LibrarianID,
	)
	var i Librarian
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.EmployeeID,
		&i.Position,
		&i.Phone,
		&i.Email,
		&i.HireDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
