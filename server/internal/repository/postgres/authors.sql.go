// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: authors.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (full_name)
VALUES ($1)
RETURNING id, full_name
`

type CreateAuthorRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"full_name"`
}

func (q *Queries) CreateAuthor(ctx context.Context, fullName string) (*CreateAuthorRow, error) {
	row := q.db.QueryRow(ctx, createAuthor, fullName)
	var i CreateAuthorRow
	err := row.Scan(&i.ID, &i.FullName)
	return &i, err
}

const getAllAuthors = `-- name: GetAllAuthors :many
SELECT id, full_name
FROM authors
ORDER BY full_name
`

type GetAllAuthorsRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"full_name"`
}

func (q *Queries) GetAllAuthors(ctx context.Context) ([]*GetAllAuthorsRow, error) {
	rows, err := q.db.Query(ctx, getAllAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllAuthorsRow{}
	for rows.Next() {
		var i GetAllAuthorsRow
		if err := rows.Scan(&i.ID, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthorById = `-- name: GetAuthorById :one
SELECT id, full_name
FROM authors
WHERE id = $1
`

type GetAuthorByIdRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"full_name"`
}

func (q *Queries) GetAuthorById(ctx context.Context, id uuid.UUID) (*GetAuthorByIdRow, error) {
	row := q.db.QueryRow(ctx, getAuthorById, id)
	var i GetAuthorByIdRow
	err := row.Scan(&i.ID, &i.FullName)
	return &i, err
}

const getOrCreateAuthor = `-- name: GetOrCreateAuthor :one
INSERT INTO authors (full_name)
VALUES ($1)
ON CONFLICT (full_name) DO UPDATE SET full_name = EXCLUDED.full_name
RETURNING id, full_name
`

type GetOrCreateAuthorRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"full_name"`
}

func (q *Queries) GetOrCreateAuthor(ctx context.Context, fullName string) (*GetOrCreateAuthorRow, error) {
	row := q.db.QueryRow(ctx, getOrCreateAuthor, fullName)
	var i GetOrCreateAuthorRow
	err := row.Scan(&i.ID, &i.FullName)
	return &i, err
}

const searchAuthors = `-- name: SearchAuthors :many
SELECT id, full_name
FROM authors
WHERE full_name ILIKE '%' || $1 || '%'
ORDER BY full_name
`

type SearchAuthorsRow struct {
	ID       uuid.UUID `json:"id"`
	FullName string    `json:"full_name"`
}

func (q *Queries) SearchAuthors(ctx context.Context, searchTerm *string) ([]*SearchAuthorsRow, error) {
	rows, err := q.db.Query(ctx, searchAuthors, searchTerm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchAuthorsRow{}
	for rows.Next() {
		var i SearchAuthorsRow
		if err := rows.Scan(&i.ID, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
