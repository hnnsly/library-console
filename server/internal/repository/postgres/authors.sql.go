// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: authors.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const countAuthors = `-- name: CountAuthors :one
SELECT COUNT(*) FROM authors
`

func (q *Queries) CountAuthors(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAuthors)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (full_name, birth_year, death_year, biography)
VALUES ($1, $2, $3, $4)
RETURNING id, full_name, birth_year, death_year, biography, created_at
`

type CreateAuthorParams struct {
	FullName  string  `json:"full_name"`
	BirthYear *int    `json:"birth_year"`
	DeathYear *int    `json:"death_year"`
	Biography *string `json:"biography"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (*Author, error) {
	row := q.db.QueryRow(ctx, createAuthor,
		arg.FullName,
		arg.BirthYear,
		arg.DeathYear,
		arg.Biography,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthYear,
		&i.DeathYear,
		&i.Biography,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, authorID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuthor, authorID)
	return err
}

const getAuthorByID = `-- name: GetAuthorByID :one
SELECT id, full_name, birth_year, death_year, biography, created_at FROM authors WHERE id = $1
`

func (q *Queries) GetAuthorByID(ctx context.Context, authorID uuid.UUID) (*Author, error) {
	row := q.db.QueryRow(ctx, getAuthorByID, authorID)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthYear,
		&i.DeathYear,
		&i.Biography,
		&i.CreatedAt,
	)
	return &i, err
}

const getAuthorsByBook = `-- name: GetAuthorsByBook :many
SELECT a.id, a.full_name, a.birth_year, a.death_year, a.biography, a.created_at
FROM authors a
JOIN book_authors ba ON a.id = ba.author_id
WHERE ba.book_id = $1
ORDER BY a.full_name
`

func (q *Queries) GetAuthorsByBook(ctx context.Context, bookID uuid.UUID) ([]*Author, error) {
	rows, err := q.db.Query(ctx, getAuthorsByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.BirthYear,
			&i.DeathYear,
			&i.Biography,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, full_name, birth_year, death_year, biography, created_at FROM authors ORDER BY full_name
LIMIT $2 OFFSET $1
`

type ListAuthorsParams struct {
	OffsetVal int32 `json:"offset_val"`
	LimitVal  int32 `json:"limit_val"`
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]*Author, error) {
	rows, err := q.db.Query(ctx, listAuthors, arg.OffsetVal, arg.LimitVal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.BirthYear,
			&i.DeathYear,
			&i.Biography,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAuthorsByName = `-- name: SearchAuthorsByName :many
SELECT id, full_name, birth_year, death_year, biography, created_at FROM authors
WHERE to_tsvector('russian', full_name) @@ plainto_tsquery('russian', $1)
ORDER BY full_name
`

func (q *Queries) SearchAuthorsByName(ctx context.Context, searchQuery string) ([]*Author, error) {
	rows, err := q.db.Query(ctx, searchAuthorsByName, searchQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.BirthYear,
			&i.DeathYear,
			&i.Biography,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
SET
    full_name = COALESCE($1, full_name),
    birth_year = COALESCE($2, birth_year),
    death_year = COALESCE($3, death_year),
    biography = COALESCE($4, biography)
WHERE id = $5
RETURNING id, full_name, birth_year, death_year, biography, created_at
`

type UpdateAuthorParams struct {
	FullName  string    `json:"full_name"`
	BirthYear *int      `json:"birth_year"`
	DeathYear *int      `json:"death_year"`
	Biography *string   `json:"biography"`
	AuthorID  uuid.UUID `json:"author_id"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (*Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor,
		arg.FullName,
		arg.BirthYear,
		arg.DeathYear,
		arg.Biography,
		arg.AuthorID,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthYear,
		&i.DeathYear,
		&i.Biography,
		&i.CreatedAt,
	)
	return &i, err
}
