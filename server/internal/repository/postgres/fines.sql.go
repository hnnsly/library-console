// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: fines.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/govalues/decimal"
)

const createFine = `-- name: CreateFine :one
INSERT INTO fines (reader_id, book_issue_id, amount, reason)
VALUES ($1, $2, $3, $4)
RETURNING id, fine_date, amount, reason
`

type CreateFineParams struct {
	ReaderID    uuid.UUID       `json:"reader_id"`
	BookIssueID *uuid.UUID      `json:"book_issue_id"`
	Amount      decimal.Decimal `json:"amount"`
	Reason      string          `json:"reason"`
}

type CreateFineRow struct {
	ID       uuid.UUID       `json:"id"`
	FineDate *time.Time      `json:"fine_date"`
	Amount   decimal.Decimal `json:"amount"`
	Reason   string          `json:"reason"`
}

func (q *Queries) CreateFine(ctx context.Context, arg CreateFineParams) (*CreateFineRow, error) {
	row := q.db.QueryRow(ctx, createFine,
		arg.ReaderID,
		arg.BookIssueID,
		arg.Amount,
		arg.Reason,
	)
	var i CreateFineRow
	err := row.Scan(
		&i.ID,
		&i.FineDate,
		&i.Amount,
		&i.Reason,
	)
	return &i, err
}

const getReaderFines = `-- name: GetReaderFines :many
SELECT id, amount, reason, fine_date, paid_date, is_paid
FROM fines
WHERE reader_id = $1
ORDER BY fine_date DESC
`

type GetReaderFinesRow struct {
	ID       uuid.UUID       `json:"id"`
	Amount   decimal.Decimal `json:"amount"`
	Reason   string          `json:"reason"`
	FineDate *time.Time      `json:"fine_date"`
	PaidDate *time.Time      `json:"paid_date"`
	IsPaid   *bool           `json:"is_paid"`
}

func (q *Queries) GetReaderFines(ctx context.Context, readerID uuid.UUID) ([]*GetReaderFinesRow, error) {
	rows, err := q.db.Query(ctx, getReaderFines, readerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetReaderFinesRow{}
	for rows.Next() {
		var i GetReaderFinesRow
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Reason,
			&i.FineDate,
			&i.PaidDate,
			&i.IsPaid,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReaderUnpaidFinesTotal = `-- name: GetReaderUnpaidFinesTotal :one
SELECT COALESCE(SUM(amount), 0) as total_unpaid
FROM fines
WHERE reader_id = $1 AND is_paid = false
`

func (q *Queries) GetReaderUnpaidFinesTotal(ctx context.Context, readerID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getReaderUnpaidFinesTotal, readerID)
	var total_unpaid interface{}
	err := row.Scan(&total_unpaid)
	return total_unpaid, err
}

const getUnpaidFines = `-- name: GetUnpaidFines :many
SELECT
    f.id,
    r.ticket_number,
    r.full_name as reader_name,
    f.amount,
    f.reason,
    f.fine_date
FROM fines f
JOIN readers r ON f.reader_id = r.id
WHERE f.is_paid = false
ORDER BY f.fine_date
`

type GetUnpaidFinesRow struct {
	ID           uuid.UUID       `json:"id"`
	TicketNumber string          `json:"ticket_number"`
	ReaderName   string          `json:"reader_name"`
	Amount       decimal.Decimal `json:"amount"`
	Reason       string          `json:"reason"`
	FineDate     *time.Time      `json:"fine_date"`
}

func (q *Queries) GetUnpaidFines(ctx context.Context) ([]*GetUnpaidFinesRow, error) {
	rows, err := q.db.Query(ctx, getUnpaidFines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUnpaidFinesRow{}
	for rows.Next() {
		var i GetUnpaidFinesRow
		if err := rows.Scan(
			&i.ID,
			&i.TicketNumber,
			&i.ReaderName,
			&i.Amount,
			&i.Reason,
			&i.FineDate,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const payFine = `-- name: PayFine :one
UPDATE fines
SET paid_date = CURRENT_DATE, is_paid = true
WHERE id = $1
RETURNING id, amount, paid_date
`

type PayFineRow struct {
	ID       uuid.UUID       `json:"id"`
	Amount   decimal.Decimal `json:"amount"`
	PaidDate *time.Time      `json:"paid_date"`
}

func (q *Queries) PayFine(ctx context.Context, fineID uuid.UUID) (*PayFineRow, error) {
	row := q.db.QueryRow(ctx, payFine, fineID)
	var i PayFineRow
	err := row.Scan(&i.ID, &i.Amount, &i.PaidDate)
	return &i, err
}
